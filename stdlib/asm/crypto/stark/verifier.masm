use.std::crypto::fri::frie2f4
use.std::crypto::fri::helper

use.std::crypto::stark::deep_queries
use.std::crypto::stark::random_coin
use.std::crypto::stark::ood_frames
use.std::crypto::stark::public_inputs
use.std::crypto::stark::constants
use.std::crypto::stark::utils

#!   Verify a STARK proof attesting to the correct execution of a program in the Miden VM.
#!   The following simplifying assumptions are currently made:
#!   - The blowup factor is set to 8.
#!   - The maximal allowed degree of the remainder polynomial is 127.
#!   - The public inputs are composed of the input and output stacks, of fixed size equal to 16, as
#!     well as the program and the kernel procedures digests.
#!   - There are two trace segments, main and auxiliary. It is assumed that the main trace segment
#!     is 73 columns wide while the auxiliary trace segment is 8 columns wide. Note that we pad the main
#!     trace to the next multiple of 8.
#!   - The OOD evaluation frame is composed of two concatenated rows, current and next, each composed
#!     of 73 elements representing the main trace portion and 8 elements for the auxiliary trace one.
#!     Note that, due to the padding of the main trace columns, the number of OOD evaluations per row
#!     is 80 for the main trace.
#!   - To boost soundness, the protocol is run on a quadratic extension field and this means that
#!     the OOD evaluation frame is composed of elements in a quadratic extension field i.e. tuples.
#!     Similarly, elements of the auxiliary trace are quadratic extension field elements. The random
#!     values for computing random linear combinations are also in this extension field.
#!   - The following procedure makes use of global memory address beyond 3 * 2^30 and these are
#!     defined in `constants.masm`.
#!
#! Input: [log(trace_length), num_queries, grinding,  ...]
#! Output: [...]
#!
#! Cycles:
#!  1- Remainder polynomial size 64:
#!   2515 + num_queries * (512 + num_fri_layers * 83) + 108 * num_fri_layers + 10 * log(trace_length)
#!  2- Remainder polynomial size 128:
#!   2540 + num_queries * (541 + num_fri_layers * 83) + 108 * num_fri_layers + 10 * log(trace_length)
#!
#!  where num_fri_layers is computed as:
#!
#!  1- If log(trace_length) is even, then num_fri_layers = (log(trace_length) - 6) / 2, where 6 = log2(64),
#!  2- If log(trace_length) is odd, then num_fri_layers = (log(trace_length) - 7) / 2, where 7 = log2(128).
export.verify

    #==============================================================================================
    #       I)  Hash proof context and hash-&-load public inputs
    #==============================================================================================

    # Validate inputs
    #
    # Cycles: 45
    exec.utils::validate_inputs
    # => [log(trace_length), num_queries, grinding, ...]

    # Initialize the seed using proof context
    #
    # Cycles: 210
    exec.random_coin::init_seed
    # => [C, ...]

    # Load public inputs
    #
    # Cycles: ~ 500 + 70 * number_kernel_procedures
    exec.public_inputs::process_public_inputs

    #==============================================================================================
    #       II) Generate the auxiliary trace random elements
    #==============================================================================================

    # Load main trace commitment and re-seed with it
    #
    # Cycles: 56
    padw
    adv_loadw
    exec.constants::main_trace_com_ptr mem_storew
    # => [main_trace_commitment, ...]
    exec.random_coin::reseed
    # => [...]

    # Draw random ExtFelt for the auxiliary trace
    #
    # Cycles: 12
    exec.random_coin::generate_aux_randomness
    # => [...]

    # Reseed with auxiliary trace commitment
    #
    # Cycles: 64
    padw
    adv_loadw
    exec.constants::aux_trace_com_ptr mem_storew
    exec.random_coin::reseed
    # => [...]

    #==============================================================================================
    #       III) Draw constraint composition coefficients
    #==============================================================================================

    # Cycles: 13
    exec.random_coin::generate_constraint_composition_coefficients
    # => [...]

    #==============================================================================================
    #       IV) Reseed with commitment to constraint composition polynomial H evaluations over LDE
    #          and generate the Out-of-Domain (OOD) challenge z
    #==============================================================================================

    # Reseed with constraint composition polynomial commitment
    #
    # Cycles: 88 + 18 * log(trace_length)
    padw
    adv_loadw
    exec.constants::composition_poly_com_ptr mem_storew
    exec.random_coin::reseed
    exec.random_coin::generate_z_zN
    # => [...]

    #==============================================================================================
    #       V) Read the OOD frames for the main trace, auxiliary trace and the trace of evaluations
    #           of H over the LDE domain. This also computes some values needed for the computation
    #           of the DEEP queries.
    #==============================================================================================

    exec.ood_frames::load_and_horner_eval_ood_frames

    #==============================================================================================
    #       VI) Constraint evaluation check
    #==============================================================================================

    exec.utils::constraint_evaluation_check

    #==============================================================================================
    #       VII) FRI
    #==============================================================================================

    #============================================
    #   1) Draw random coefficients for computing
    #       DEEP composition polynomial.
    #============================================

    # Cycles: 14
    exec.random_coin::generate_deep_composition_random_coefficients

    #============================================
    #   2) Compute constants needed for computing
    #       FRI queries. These are:
    #       -   LDE domain generator.
    #       -   Trace domain generator `g`.
    #       -   `gz`.
    #       -   Number of FRI layers.
    #============================================

    # Cycles: 77
    exec.helper::generate_fri_parameters
    # => [...]

    #============================================
    #   3) Load and reseed with FRI layer commitments
    #      and draw the folding challenges for
    #      computing the degree respecting projection
    #============================================

    # Cycles: 40 + 108 * num_fri_layers
    exec.helper::load_fri_layer_commitments
    # => [...]

    #============================================
    #   4) Load and check commitment to remainder
    #      polynomial.
    #============================================

    # Cycles:
    #  1- Remainder polynomial of degree less
    #     than 64: 157
    #  2- Remainder polynomial of degree less
    #     than 128: 191
    exec.helper::load_and_verify_remainder
    # => [...]

    #============================================
    #   5) Check PoW nonce
    #============================================

    # Cycles: 78
    exec.random_coin::check_pow
    # => [...]

    #============================================
    #   6) Compute evaluations of DEEP composition
    #   polynomial at randomly chosen query positions
    #============================================

    # Compute the pointer to the first query using the pointer to
    # the first layer commitment and the total number of queries.
    exec.helper::compute_query_pointer

    # Draw random query indices
    #
    # Cycles: 92 + 32.5 * num_queries
    exec.random_coin::generate_list_indices
    # => [...]

    # Compute deep composition polynomial queries
    #
    # Cycles: 426 + num_queries * 373
    exec.deep_queries::compute_deep_composition_polynomial_queries
    # => [...]

    #============================================
    #   7) Call the FRI verifier
    #============================================

    # Call FRI verifier
    #
    # Cycles:
    #  1- Remainder of size 64: 18 + num_queries * (107 + num_layers * 83)
    #  2- Remainder of size 128: 18 + num_queries * (140 + num_layers * 83)
    exec.frie2f4::verify
end
